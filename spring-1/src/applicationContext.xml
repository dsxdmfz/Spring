<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- 
		配置bean
		class:bean的全类名，通过反射的方式在IOC容器中创建Bean。所以要求Bean中必须有无参数的构造器
		id:标识容器中的Bean，id唯一。 
	-->
	<bean id="helloworld" class="com.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置Bean的属性 -->
	<bean id="car" class="com.spring.beans.Car">
		<constructor-arg value="Auid" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.spring.beans.Car">
		<constructor-arg value="BaoMa" type="java.lang.String"></constructor-arg>
		<!-- 如果字面包含特殊字符，可以用<![CDATA[]]>包裹起来 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<BeiJing>^]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<value>240</value>
		</constructor-arg>
	</bean>
	
	<bean id="person" class="com.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="18"></property>
		<!-- 可以使用property的 ref属性建立Bean之间的引用关系 -->
		<!--  
		<property name="car" ref="car2"></property>
		-->
		<!-- 
		<property name="car">
			<ref bean="car2"/>
		</property>
		 -->
		<!-- 内部Bean，不能被外部引用，只能在内部使用 -->
		<property name="car">
			<bean class="com.spring.beans.Car">
				<constructor-arg value="Ben" index="0"></constructor-arg>
				<constructor-arg value="GuangZhou" index="1"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean>
		</property>
		<property name="car.maxSpeed" value="210"></property>
	</bean>
	
	<bean id="person2" class="com.spring.beans.Person">
		<constructor-arg value="Jerry"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<!--  
		<constructor-arg ref="car"></constructor-arg>
		-->
		<!-- 测试赋值null -->
		<!-- 
		<constructor-arg><null/></constructor-arg>
		 -->
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值.注意：属性需要先初始化后才可以为级联属性赋值，否则会有异常，和struts2不同 -->
		<property name="car.maxSpeed" value="200"></property>
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="com.spring.beans.collectic.Person">
		<property name="name" value="jike"></property>
		<property name="age" value="20"></property>
		<property name="cars">
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map属性值 -->
	<bean id="newPerson" class="com.spring.beans.collectic.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="21"></property>
		<property name="cars">
			<!-- 使用Map的节点及map的entry节点配置Map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties属性值 -->
	<bean id="properties" class="com.spring.beans.collectic.DataSource">
		<property name="properties">
			<!-- 使用props和prop子节点来为properties属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="pwd">123456</prop>
				<prop key="role">student</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合Bean,以供多个bean进行引用，需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="com.spring.beans.collectic.Person">
		<property name="name" value="person4"></property>
		<property name="age" value="24"></property>
		<property name="cars" ref="cars"></property>
	</bean>

	<!-- 通过P命名空间为bean的属性赋值，需要先导入P命名空间 ,相对于传统配置更加清洁-->
	<bean id="person5" class="com.spring.beans.collectic.Person"
		p:name="person5" p:age="25" p:cars-ref="cars"></bean>
	
</beans>
